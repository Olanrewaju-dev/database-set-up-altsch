// 3(a) creation of all the entities

// creating database
use inventory_management_db;

// creating category table or collection
db.createCollections("product");
db.createCollections("category");
db.createCollections("brand");
db.createCollections("user");
db.createCollections("orders");



// 3(b) Show commands for inserting records into the entities
// inserting test data into the tables

db.product.insertOne(
    {
      // no id need since it's automatically generated by MongoDB
      "name": "omo",
      "price": 2.99,
      "size": "small",
      "description": "a detergent to wash household items such as plates, clothes etc",
      "createdAt": Date.now,
      "updatedAt": "",
      "categoryId": category.id,
      "brandId": brand.id
    }
)

db.category.insertMany([
    {
      // no id need since it's automatically generated by MongoDB
      "title": "toiletries",
      "description": "products used in washing such as shampoo, toothpaste, soap, etc"
    },
    {
        // no id need since it's automatically generated by MongoDB
        "title": "skin care",
        "description": "products used to care for human skin such as cream, face wash, sun screen cream etc"
      }
]
)

db.brand.insertMany([
    {
      // no id need since it's automatically generated by MongoDB
      "name": "unilever",
      "description": "Unilever Plc (Unilever) is a manufacturer and supplier of fast-moving consumer goods. The company's product portfolio comprises food products, beauty, and personal care products, beverages, home care products, vitamins, minerals, and supplements"
    },
    {
        // no id need since it's automatically generated by MongoDB
        "name": "oriflame",
        "description": 'founded in 1966, oriflame is a social selling beauty company in over 60 markets, with a diverse portfolio of Swedish, nature-inspired, innovative beauty and wellness products'
      },
]
)

db.user.insertOne(
    {
      // no id need since it's automatically generated by MongoDB
      "firstname": "olanrewaju",
      "lastname": "balogun",
      "email": "olanrewaju@gmail.com",
      "password": "asdfjiwes#4%",
      "createdAt": Date.now,
      "updatedAt": Date.now,
      "lastLogin": "",
      "userType": "admin",
      "mobileNumber": "",
      "address": "Lagos, Nigeria",
    }
)

db.orders.insertOne(
    {
      // no id need since it's automatically generated by MongoDB
      "orderStatus": "awaiting_approval",
      "createdAt": Date.now,
      "productId": product.id,
      "userId": user.id
    }
)


// 3(c) Show commands for getting records from two or more entities
// getting all records from brand entity
db.brand.find()

// getting a record from category entity
db.category.find({"title": "skin care" })


// 3(d) Show commands for updating records from two or more entities
// updating user entity

db.user.updateOne( { email: "olanrewaju@gmail.com" },
{
  $set: {
    email: "olanrewaju20@gmail.com"
  },
  $currentDate: { updatedAt: true } // setting the update date
})


// updating orders entity
db.orders.updateOne( { id: orders.id },
{
  $set: {
    orderStatus: "approved"
  },
  $currentDate: { updatedAt: true } // setting the update date 
})


// 3(e) Show commands for deleting records from two or more entities
// deleting records from category entity
db.category.deleteOne( { title: "skin care" } )

// deleting records from category entity
db.brand.deleteOne( { name: "oriflame" } )


// creating schema for collections
// const productSchema = new Schema({
//     name: { type: String },
//     brand: { type: String, min: 18 },
//     price: { type: Number },
//     size: { type: String, enum: ['small', 'medium', 'large'] },
//     description: {type: String, min: 18 },
//     createdAt: {type: Date },
//     updatedAt: {type: Date },

// });